@startuml Interface Model

skinparam linetype polyline
skinparam DefaultFontName monospaced
skinparam groupInheritance 2

enum TypeKind {
    Builtin
    Pointer
    Function
    Elaborated
}

enum BuiltinKind {
    None   = 0x0000
    Void   = 0x0001
    Bool   = 0x0002
    S8     = 0x0010 
    S16    = 0x0011
    S32    = 0x0012
    S64    = 0x0013
    SIPtr  = 0x0014
    U8     = 0x0020
    U16    = 0x0021
    U32    = 0x0022
    U64    = 0x0023
    UIPtr  = 0x0024
    FP16   = 0x0031
    FP32   = 0x0032
    FP64   = 0x0033
    String = 0x000F
    Array  = 0x100F
}

struct Constraint {
    bool Constant
    bool Volatile
}

interface ITypeData {}

struct BuiltinTypeData implements ITypeData {
    BuiltinKind Kind
}
BuiltinTypeData::Kind <.up. BuiltinKind

struct PointerTypeData implements ITypeData {
    Type* Next
}

struct FunctionTypeData implements ITypeData {
    Type*           Return
    ParameterDecl[] Parameters
}

struct ElaboratedTypeData implements ITypeData {
    uint64 Size
    uint64 Align
}

PointerTypeData    <.[hidden]right. BuiltinTypeData
FunctionTypeData   <.[hidden]right. BuiltinTypeData
ElaboratedTypeData <.[hidden]right. BuiltinTypeData

struct Type {
    Constraint Constraint
    TypeKind   Kind
    ITypeData* Data
}

Type::Constraint <.left. Constraint
Type::Kind <.right. TypeKind
Type::Data <.down. ITypeData


struct Literal {
    BuiltinKind Kind
    void*       Data
}
Literal::Kind <.. BuiltinKind

struct ParameterDecl {
    string  Name
    Type*   Type
    Literal Default
}
note top of ParameterDecl
    Default.Data will be None 
    if there is no default value
    for parameter
end note

ParameterDecl <.. Type
Literal <.left. ParameterDecl::Default

interface IOwner

struct NamespaceDecl {
    string           Name
    TypeDecl*[]      Types
    FunctionDecl*[]  Functions
    NamespaceDecl*[] NamespaceDecl
    IOwner*          Owner
}
IOwner <|-down- NamespaceDecl
IOwner <.. NamespaceDecl::Owner

struct TypeDecl {
    string          Name
    Type*           Type
    FunctionDecl*[] Methods
    PropertyDecl*[] Properties
    IOwner*         Owner
}
IOwner <|- TypeDecl
IOwner <.. TypeDecl::Owner

struct DeclRef {
    string Name
    string ActualName
    string Assembly
}
note bottom of DeclRef
    A field 'Assembly' is
    real library file name
    such as 'A.so' or 'A.dll'
end note

struct FunctionDecl {
    DeclRef Ref
    Type*   Type
    IOwner* Owner
}
IOwner <.. FunctionDecl::Owner

FunctionDecl::Ref <.right. DeclRef
ParameterDecl -[hidden]left- DeclRef

struct PropertyDecl {
    string Name
    FunctionDecl* Getter
    FunctionDecl* Setter
}
note bottom of PropertyDecl
    A property is just sugar
    for getter/setter methods.
    There is no 'Actual Name' things.
end note

TypeDecl::Methods *-right- FunctionDecl
TypeDecl::Properties *-left- PropertyDecl

TypeDecl::Type <.. Type
FunctionDecl::Type <.. Type

NamespaceDecl::Types <.. TypeDecl
NamespaceDecl::Functions <.. FunctionDecl

TypeDecl -[hidden]right- ParameterDecl
TypeDecl -[hidden]right- Literal

@enduml
