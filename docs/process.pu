@startuml process

left to right direction

package Frontend 
{
    object Wrapper
    object Interface
}

package Backend
{
    object Bridge
}

object Source
object "Language Runtime" as RT
object Host

Source --> Wrapper
Source --> Interface

Interface --> Bridge

Bridge <-[#2222FF]- Host
Wrapper <-[#2222FF]- Bridge

RT <-[#2222FF]- Wrapper
Source <-right[#2222FF]- RT

@enduml

@startuml bi-process

left to right direction

object A
object "Wrapper(A)" as wA
object "Bridge(A)" as bA
object "Interface Representation(A)" as ihA

object B
object "Wrapper(B)" as wB
object "Interface Representation(B)" as ihB
object "Bridge(B)" as bB

object "Init Process" as I

A -[#2222FF]-> wB
A --> ihA
ihA --> wA
wB -[#2222FF]-> bB
bB -[#2222FF]-> B

wA <-[#22FF22]- B
ihB <-- B
wB <-- ihB
bA <-[#22FF22]- wA
A <-[#22FF22]- bA

I --left[#FF2222]--> bB
I --left[#FF2222]--> bA

@enduml

@startuml wrap_cxx_with_dotnet

left to right direction

package Frontend 
{
    object "Shared Object (*.dll/*.so)" as Wrapper
    object "Interface Representation" as IH
}

package Backend
{
    object ".NET library" as Bridge
}

object Source
object ".NET project" as Host

Source --> Wrapper
Source --> IH

IH --> Bridge

Bridge <-[#2222FF]- Host
Wrapper <-[#2222FF]- Bridge : P/Invoke

@enduml

@startuml wrap_dotnet_with_cxx

left to right direction

package Frontend 
{
    object Wrapper
    object "Interface" as IH
}

package Backend
{
    object "Header File" as Bridge
}

object ".NET library" as Source
object "CoreCLR" as RT
object Host

Source --> Wrapper
Source --> IH

IH --> Bridge

Bridge <-[#2222FF]- Host
Wrapper <-[#2222FF]- Bridge

RT <-[#2222FF]- Wrapper
Source <-right[#2222FF]- RT

@enduml

@startuml compilation

package Source
{
    object "non-LLVM Languages (e.g. C#, Java)" as NL #LightCoral
    object "Clang Languages (e.g. C/C++ on Clang)" as LL #LightCoral
}

package Frontend
{
    object "Language-specific compiler framework (e.g. Roslyn)" as LSA
    object "LLVM-based compiler with custom attributes" as LC
}

object "Interface Represenation" as IR

package Backend
{
    object "Language-specific code-generator" as LSCG
}

package Output
{
    object "Bridge (Platform-Dependent)" as Bridge #LightBlue
    object "Wrapper (Language-Dependent)" as Wrapper #LightBlue
}

NL --> LSA
LSA --> IR

LL --> LC
LC --> IR

IR --> LSCG

LC --> Wrapper
LSA --> Wrapper

LSCG --> Bridge

@enduml