@startuml process

left to right direction

package Frontend 
{
    object Wrapper
    object IH
}

package Backend
{
    object Bridge
}

object Source
object "Language Runtime" as RT
object Host

Source --> Wrapper
Source --> IH

IH --> Bridge

Bridge <-[#2222FF]- Host
Wrapper <-[#2222FF]- Bridge

RT <-[#2222FF]- Wrapper
Source <-right[#2222FF]- RT

@enduml

@startuml bi-process

left to right direction

object A
object "Wrapper(A)" as wA
object "Bridge(A)" as bA
object "IH(A)" as ihA

object B
object "Wrapper(B)" as wB
object "IH(B)" as ihB
object "Bridge(B)" as bB

object "Init Process" as I

A -[#2222FF]-> wB
A --> ihA
ihA --> wA
wB -[#2222FF]-> bB
bB -[#2222FF]-> B

wA <-[#22FF22]- B
ihB <-- B
wB <-- ihB
bA <-[#22FF22]- wA
A <-[#22FF22]- bA

I --left[#FF2222]--> bB
I --left[#FF2222]--> bA

@enduml

@startuml wrap_cxx_with_dotnet

left to right direction

package Frontend 
{
    object "Shared Object (*.dll/*.so)" as Wrapper
    object IH
}

package Backend
{
    object ".NET library" as Bridge
}

object Source
object ".NET project" as Host

Source --> Wrapper
Source --> IH

IH --> Bridge

Bridge <-[#2222FF]- Host
Wrapper <-[#2222FF]- Bridge : P/Invoke

@enduml

@startuml wrap_dotnet_with_cxx

left to right direction

package Frontend 
{
    object Wrapper
    object IH
}

package Backend
{
    object "Header File" as Bridge
}

object ".NET library" as Source
object "CoreCLR" as RT
object Host

Source --> Wrapper
Source --> IH

IH --> Bridge

Bridge <-[#2222FF]- Host
Wrapper <-[#2222FF]- Bridge

RT <-[#2222FF]- Wrapper
Source <-right[#2222FF]- RT

@enduml