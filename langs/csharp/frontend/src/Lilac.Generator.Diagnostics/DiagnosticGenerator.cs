using System;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Lilac.Generator.Diagnostics;

[Generator]
public class DiagnosticGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        foreach (var additionalFile in context.AdditionalFiles)
        {
            if (Path.GetFileName(additionalFile.Path) != "Diagnostics.csv" ||
                additionalFile.GetText() is not { } text)
                continue;

            Console.WriteLine(additionalFile.Path);
            
            var builder = new StringBuilder();

            builder.AppendLine(
                """
                // <auto-generated />
                
                using Microsoft.CodeAnalysis;
                
                namespace Lilac.Generator
                {
                    internal static class Diagnostics
                    {
                """);
            
            foreach (var line in text.Lines.Skip(1))
            {
                var props = line.ToString().Split(',');

                var severity = props[2]
                    .ToLowerInvariant()
                    .ToCharArray();
                severity[0] = char.ToUpperInvariant(severity[0]);
                
                builder.AppendLine(
                    $$"""
                            public static DiagnosticDescriptor {{props[3].Replace(' ', '_')}} { get; } = new(
                                "{{props[0]}}", 
                                "{{props[3]}}", 
                                "{{props[4]}}", 
                                "{{props[1]}}", 
                                DiagnosticSeverity.{{new string(severity)}}, 
                                true);
                    """);
            }

            builder.AppendLine(
                """
                    }
                }
                """);
            
            context.AddSource("Diagnostics.g.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
        }
    }
}