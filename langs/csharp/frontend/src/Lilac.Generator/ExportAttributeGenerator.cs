using System.CodeDom.Compiler;
using System.Text;
using Lilac.Generator.Exporters;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Lilac.Generator;

[Generator]
public class ExportAttributeGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        const string attrSource =
            """
            // <auto-generated />

            using System;

            namespace Lilac.Annotations
            {
                [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Enum | AttributeTargets.Constructor, AllowMultiple = false, Inherited = false)]
                internal class ExportAttribute : Attribute
                {
                }
            }
            """;
        
        context.AddSource("ExportAttribute.g.cs", SourceText.From(attrSource, Encoding.UTF8));

        var syntax = CSharpSyntaxTree.ParseText(
            attrSource, 
            (CSharpParseOptions)context.Compilation.SyntaxTrees.First().Options);
        var compilation = context.Compilation.AddSyntaxTrees(syntax);
        
        using var swSource  = new StringWriter();
        using var swHeader  = new StringWriter();
        using var swManaged = new StringWriter();
        
        var source = new IndentedTextWriter(swSource, "    ");
        var header = new IndentedTextWriter(swHeader, "    ");
        var managed = new IndentedTextWriter(swManaged, "    ");
        
        foreach (var symbol in compilation.GetSymbolsWithName(_ => true).Where(TypeHelper.IsExported))
        {
            if (symbol is not INamedTypeSymbol namedT)
            {
                var method = (IMethodSymbol)symbol;

                if (!method.ContainingType.IsExported())
                {
                    context.ReportDiagnostic(
                        Diagnostic.Create(
                            Diagnostics.Type_should_be_exported_to_export_its_member,
                            method.Locations.First(),
                            method.ContainingType.ToDisplayString(),
                            method.ToDisplayString()
                        )
                    );
                }

                continue;
            }

            var exporter = IExporter.Create(namedT);
            exporter.GenerateUnmanagedCode(source, header);
            exporter.GenerateManagedCode(managed);
            
            header.WriteLine();
        }
        
        Console.WriteLine(swHeader.ToString());
        Console.WriteLine("-------------------------------");
        Console.WriteLine(swSource.ToString());
        Console.WriteLine("-------------------------------");
        Console.WriteLine(swManaged.ToString());
    }
}